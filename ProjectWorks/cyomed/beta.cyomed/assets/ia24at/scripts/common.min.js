var FORMALIZE = function(a, b, c) {
    function d(a) {
        var b = c.createElement("b");
        return b.innerHTML = "<!--[if IE " + a + "]><br><![endif]-->", !! b.getElementsByTagName("br").length
    }
    var e = "placeholder" in c.createElement("input"),
        f = "autofocus" in c.createElement("input"),
        g = d(6),
        h = d(7);
    return {
        go: function() {
            var a, b = this.init;
            for (a in b) b.hasOwnProperty(a) && b[a]()
        },
        init: {
            full_input_size: function() {
                h && a("textarea, input.input_full").length && a("textarea, input.input_full").wrap('<span class="input_full_wrap"></span>')
            },
            ie6_skin_inputs: function() {
                if (g && a("input, select, textarea").length) {
                    var b = /button|submit|reset/,
                        c = /date|datetime|datetime-local|email|month|number|password|range|search|tel|text|time|url|week/;
                    a("input").each(function() {
                        var d = a(this);
                        this.getAttribute("type").match(b) ? (d.addClass("ie6_button"), this.disabled && d.addClass("ie6_button_disabled")) : this.getAttribute("type").match(c) && (d.addClass("ie6_input"), this.disabled && d.addClass("ie6_input_disabled"))
                    }), a("textarea, select").each(function() {
                        this.disabled && a(this).addClass("ie6_input_disabled")
                    })
                }
            },
            autofocus: function() {
                f || !a(":input[autofocus]").length || a(":input[autofocus]:visible:first").focus()
            },
            placeholder: function() {
                !e && !! a(":input[placeholder]").length && (FORMALIZE.misc.add_placeholder(), a(":input[placeholder]").each(function() {
                    if (this.type !== "password") {
                        var b = a(this),
                            c = b.attr("placeholder");
                        b.focus(function() {
                            b.val() === c && b.val("").removeClass("placeholder_text")
                        }).blur(function() {
                            FORMALIZE.misc.add_placeholder()
                        }), b.closest("form").submit(function() {
                            b.val() === c && b.val("").removeClass("placeholder_text")
                        }).bind("reset", function() {
                            setTimeout(FORMALIZE.misc.add_placeholder, 50)
                        })
                    }
                }))
            }
        },
        misc: {
            add_placeholder: function() {
                e || !a(":input[placeholder]").length || a(":input[placeholder]").each(function() {
                    if (this.type !== "password") {
                        var b = a(this),
                            c = b.attr("placeholder");
                        (!b.val() || b.val() === c) && b.val(c).addClass("placeholder_text")
                    }
                })
            }
        }
    }
}(jQuery, this, this.document);
jQuery(document).ready(function() {
    FORMALIZE.go()
});
var AT = AT || {};
AT._defer(function(a, b, c, d) {
    a.c = function(a) {};
    var e, f = function() {
            var a = b(this);
            "" == a.val() ? a.addClass("placeholder") : (a.removeClass("placeholder"), a.find(".select-placeholder").remove())
        }, g = b(".calendar"),
        h = g.eq(0),
        i = function() {
            if (1 === h.length) {
                var a = h.width();
                a > 670 ? g.removeClass("medium small").addClass("large") : 670 > a && a > 500 ? g.removeClass("small large").addClass("medium") : 500 > a && g.removeClass("medium large").addClass("small")
            }
        };
    b(d).resize(function() {
        clearTimeout(e), e = setTimeout(i, 25)
    }), b(function() {
        b("select").change(f).change(), i(), b(".insurance-selector-button").on("click", function(a) {
            var c = b(this);
            c.hasClass("active") && a.preventDefault()
        })
    }), b(".doctor-login input[name=email] + a").click(function() {
        b("form").hide(), b("#forgot-email").show()
    }), b(".doctor-login input[name=password] + a").click(function() {
        b("form").hide(), b("#forgot-password").show()
    })
}(AT, jQuery, document, window));;
var AT = AT || {};
AT._defer(function() {
    ! function(a, b, c) {
        var d = 0,
            e = 1,
            f = 0,
            g = {
                RIGHT: 1,
                LEFT: -1
            };
        a.Calendar = {
            addDaysToTextDate: function(a, b) {
                b = b || 14;
                var c = new Date(a.replace(/\-/g, "/"));
                c.setDate(c.getDate() + parseInt(b, 10));
                var d = c.getDate();
                d = d > 9 ? d : "0" + d;
                var e = c.getMonth() + 1;
                return e = e > 9 ? e : "0" + e, c = c.getFullYear() + "-" + e + "-" + d
            },
            fetchAppointments: function(a, c, d, e, f) {
                if (a && c) {
                    var g, i = [];
                    f = f || b.noop, b(".calendar.scrollable").each(function() {
                        var a = b(this);
                        i.push(a.data("user-id") + "|" + a.data("location-id"))
                    }), g = i.join(","), b.ajax({
                        url: apiUrl + "/available-appointments.json",
                        data: {
                            date_start: a,
                            date_end: c,
                            insurance_id: d,
                            medical_specialty_id: e,
                            providers: g
                        },
                        success: function(a) {
                            var c = b("#providers");
                            c.data("date-start", a.date_start), c.data("date-end", a.date_end), c.data("date-days", a.days), b(".calendar.scrollable").each(function() {
                                var c = b(this),
                                    d = c.data("user-id"),
                                    e = c.data("location-id"),
                                    f = a.providers[d + "|" + e].html;
                                c.find(".wrapper").append(f)
                            }), h.setWrappersWidth(), "function" == typeof f && f.call()
                        }
                    })
                }
            },
            setWrappersWidth: function() {
                b(".calendar .wrapper").each(function() {
                    var a = b(this),
                        c = a.find(".col");
                    e = c.eq(0).outerWidth(!0), a.width(e * c.length)
                }), f = 3 * e
            },
            currX: 0,
            scrollCalendar: function(a, c) {
                a = a || g.RIGHT; {
                    var e = (b(".calendar.scrollable .wrapper"), c.find(".wrapper"));
                    parseFloat(e.css("margin-left"))
                }
                if (e.length && !e.is(":animated"))
                    if (a === g.RIGHT) {
                        b(".calendar .arrow.left").removeClass("disabled");
                        var i = c.find("a[data-next-appointment-date]");
                        if (0 != i.length && !c.hasClass("hide-action")) return void i.click();
                        var j = e.width();
                        if (d - h.currX + f > j) {
                            var k = b("#providers").data("date-end");
                            k = h.addDaysToTextDate(k, 1);
                            var l = h.addDaysToTextDate(k, 14),
                                m = c.data("insurance-id"),
                                n = c.data("specialty-id");
                            h.fetchAppointments(k, l, m, n, function() {
                                h.currX -= f, h.translateWrappers()
                            })
                        } else h.currX -= f, h.translateWrappers()
                    } else a === g.LEFT && (h.currX += f, h.currX > 0 && (h.currX = 0), h.translateWrappers())
            },
            translateWrappers: function() {
                $wrapper = b(".calendar.scrollable > .wrapper"), h.has3d ? ($wrapper.css({
                    position: "relative",
                    "-webkit-transition": "all 0.3s linear",
                    "-moz-transition": "all 0.3s linear",
                    "-ms-transition": "all 0.3s linear",
                    "-o-transition": "all 0.3s linear",
                    transition: "all 0.3s linear",
                    "-webkit-transform": "translate3d(" + h.currX + "px,0,0)",
                    "-moz-transform": "translate3d(" + h.currX + "px,0,0)",
                    "-ms-transform": "translate3d(" + h.currX + "px,0,0)",
                    "-o-transform": "translate3d(" + h.currX + "px,0,0)",
                    transform: "translate3d(" + h.currX + "px,0,0)"
                }), $wrapper.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function() {
                    b(c).trigger("AT:Calendar:scrollend")
                })) : $wrapper.animate({
                    marginLeft: h.currX
                }, 300)
            },
            has3d: function() {
                var a, b = document.createElement("p"),
                    c = {
                        webkitTransform: "-webkit-transform",
                        OTransform: "-o-transform",
                        msTransform: "-ms-transform",
                        MozTransform: "-moz-transform",
                        transform: "transform"
                    };
                document.body.insertBefore(b, null);
                for (var d in c) void 0 !== b.style[d] && (b.style[d] = "translate3d(1px,1px,1px)", a = window.getComputedStyle(b).getPropertyValue(c[d]));
                return document.body.removeChild(b), void 0 !== a && a.length > 0 && "none" !== a
            }(),
            updateShowNextApptButton: function(a, c) {
                b(".calendar .arrow.left").removeClass("disabled"), a.each(function() {
                    var a = b(this).parents(".calendar");
                    if (a.hasClass("type-next-available-appointment")) {
                        var d = a.find(".appointment");
                        if (d.length > 0) {
                            var e = a.get(0).getBoundingClientRect().right,
                                g = a.get(0).getBoundingClientRect().bottom,
                                h = c || d.get(0).getBoundingClientRect().left - f,
                                i = d.get(0).getBoundingClientRect().top;
                            g > i && e > h && a.addClass("hide-action")
                        }
                    }
                })
            },
            showNextAppointment: function() {
                var c = b(this).closest(".calendar"),
                    d = b("#providers"),
                    g = d.data("date-start"),
                    i = d.data("date-end");
                g = h.addDaysToTextDate(g, 1);
                var j = b(this).find("a").data("next-appointment-date");
                if (a.datesHelper.inRange(j, g, i)) {
                    {
                        var k = c.find(".col[data-date=" + j + "]"); - 1 * c.find(".col").index(k) * e
                    }
                    h.currX -= f, h.translateWrappers()
                } else {
                    var l = new Date(i) > new Date(j) ? i : j,
                        m = a.datesHelper.compare(j, l) > 0 ? h.addDaysToTextDate(j, 14) : h.addDaysToTextDate(l, 14),
                        n = c.data("insurance-id"),
                        o = c.data("specialty-id");
                    h.fetchAppointments(l, m, n, o, function() {
                        var a = c.find(".col[data-date=" + j + "]"),
                            b = -1 * c.find(".col").index(a) * e;
                        h.currX = b, h.translateWrappers()
                    })
                }
            },
            showMoreAppointments: function() {
                var a = b(this),
                    c = b(".layer");
                c.find(".popup-container.appointments").remove();
                var d = b('<div class="popup-container appointments" style="position:absolute;"></div>');
                d.html(a.find(".appointments").html()).appendTo(c);
                var e = a.offset(),
                    f = e.top - 11,
                    g = e.left - 6;
                d.css({
                    top: f,
                    left: g
                }).show(), d.one("mouseleave", function() {
                    d.remove()
                })
            },
            setListeners: function() {
                b(c).on("AT:Calendar:initialized", h.setWrappersWidth).on("mouseenter click", ".calendar .more", h.showMoreAppointments).on("click", ".type-next-available-appointment .message", h.showNextAppointment), b(c).on("AT:Calendar:scrollend", function() {
                    h.updateShowNextApptButton(b(".calendar.scrollable .wrapper"))
                }), b(c).on("touchstart click", ".calendar .arrow.right", function(a) {
                    a.stopPropagation(), a.preventDefault(), h.scrollCalendar(g.RIGHT, b(this).closest(".calendar"))
                }), b(c).on("touchstart click", ".calendar .arrow.left", function(a) {
                    a.stopPropagation(), a.preventDefault(), h.scrollCalendar(g.LEFT, b(this).closest(".calendar"))
                })
            },
            initialize: function() {
                d = b(".calendar").eq(0).width(), Date.prototype.toISOString || (Date.prototype.toJSON || (Date.prototype.toJSON = function() {
                    function a(a) {
                        return 10 > a ? "0" + a : a
                    }
                    return this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "Z"
                }), Date.prototype.toISOString = Date.prototype.toJSON), h.setListeners(), b(c).trigger("AT:Calendar:initialized")
            }
        }, a.datesHelper = {
            convert: function(a) {
                return a.constructor === Date ? a : a.constructor === Array ? new Date(a[0], a[1], a[2]) : a.constructor === Number ? new Date(a) : a.constructor === String ? new Date(a) : "object" == typeof a ? new Date(a.year, a.month, a.date) : 0 / 0
            },
            compare: function(a, b) {
                return isFinite(a = this.convert(a).valueOf()) && isFinite(b = this.convert(b).valueOf()) ? (a > b) - (b > a) : 0 / 0
            },
            inRange: function(a, b, c) {
                return isFinite(a = this.convert(a).valueOf()) && isFinite(b = this.convert(b).valueOf()) && isFinite(c = this.convert(c).valueOf()) ? a >= b && c >= a : 0 / 0
            }
        };
        var h = a.Calendar;
        b(function() {
            a.Calendar.initialize()
        })
    }(AT, jQuery, document, window)
});;
var AT = AT || {};
AT._defer(function() {
    ! function(a, b, c) {
        a.Provider = {
            initialize: function() {
                b(c).on("click", ".result .additional-info > ul > li", function() {
                    var a = b(this),
                        c = a.parents(".additional-info");
                    if (1 == c.children().length) {
                        var e = c.parents("section.result").attr("data-user-id");
                        b.ajax({
                            url: apiUrl + "/get-doctor-additional-info.json",
                            data: {
                                userId: e
                            },
                            success: function(e) {
                                c.append(b(e.html)), d.showAdditionalInfo.call(a)
                            }
                        })
                    } else d.showAdditionalInfo.call(a)
                }), b(c).on("mouseleave", ".result", function() {
                    b(this).find(".additional-info *").removeClass("active animated")
                }), b(c).on("mouseleave", ".result .additional-info", function() {
                    var a = b(this),
                        c = a.find("section.active");
                    setTimeout(function() {
                        c.one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function() {
                            c.removeClass("animated")
                        }), c.addClass("animated").removeClass("active"), a.find("*").removeClass("active")
                    }, 500)
                })
            },
            showAdditionalInfo: function() {
                var a = b(this);
                a.siblings().removeClass("active"), a.addClass("active");
                var c = a.attr("data-opens"),
                    d = a.parents(".additional-info").find("> section"),
                    e = d.filter(function() {
                        return b(this).hasClass(c)
                    }),
                    f = d.filter(".active");
                f.is(e) ? (e.one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function() {
                    e.removeClass("animated")
                }), e.addClass("animated").removeClass("active"), a.parents(".additional-info").find("*").removeClass("active")) : (d.removeClass("active animated"), 0 == f.length && e.addClass("animated"), e.addClass("active"), e.siblings("ul").addClass("active"))
            }
        };
        var d = a.Provider;
        d.initialize()
    }(AT, jQuery, document, window)
});